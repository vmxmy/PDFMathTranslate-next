name: Rebuild and Redeploy

on:
  workflow_dispatch:
    inputs:
      babeldoc_version:
        description: 'BabelDOC version to use (e.g., 0.9.5). Leave empty to use the latest.'
        required: false
        default: ''

permissions:
  id-token: write
  contents: write
  packages: write

env:
  REGISTRY: ghcr.io
  REPO_LOWER: ${{ github.repository_owner }}/${{ github.event.repository.name }}
  GHCR_REPO: ghcr.io/${{ github.repository }}
  DOCKERHUB_REPO: kulangsu/pdf2zh
  WIN_EXE_PYTHON_VERSION: "3.13.3"

jobs:
  get-latest-release:
    name: Get Latest Release Tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get-tag.outputs.tag }}
    steps:
      - name: Get latest release tag
        id: get-tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_TAG=$(gh release list --exclude-drafts --repo ${{ github.repository }} --limit 1 --json tagName --jq '.[0].tagName')
          if [ -z "$LATEST_TAG" ]; then
            echo "No release found"
            exit 1
          fi
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT

  test:
    name: Run Python Tests
    needs: get-latest-release
    uses: ./.github/workflows/python-test.yml
    with:
      ref: ${{ needs.get-latest-release.outputs.tag }}

  build-win64-exe:
    name: Build Windows EXE
    runs-on: windows-latest
    needs: get-latest-release
    outputs:
      babeldoc_version: ${{ steps.get-babeldoc-version.outputs.version }}
    steps:
      - name: checkout babeldoc metadata
        uses: actions/checkout@v5
        with:
          repository: funstory-ai/BabelDOC
          path: babeldoctemp1234567
          token: ${{ secrets.GITHUB_TOKEN }}
          sparse-checkout: babeldoc/assets/embedding_assets_metadata.py
      - name: Cached Assets
        id: cache-assets
        uses: actions/cache@v4.2.2
        with:
          path: ~/.cache/babeldoc
          key: test-1-babeldoc-assets-${{ hashFiles('babeldoctemp1234567/babeldoc/assets/embedding_assets_metadata.py') }}
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.get-latest-release.outputs.tag }}

      - name: Setup uv with Python ${{ env.WIN_EXE_PYTHON_VERSION }}
        uses: astral-sh/setup-uv@4959332f0f014c5280e7eac8b70c90cb574c9f9b # v6.6.0
        with:
          python-version: ${{ env.WIN_EXE_PYTHON_VERSION }}
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"
          activate-environment: true
      
      - name: Execute build tasks
        shell: pwsh
        run: |
          Write-Host "==== Creating directories ===="
          New-Item -Path "./build" -ItemType Directory -Force
          New-Item -Path "./build/runtime" -ItemType Directory -Force
          New-Item -Path "./dep_build" -ItemType Directory -Force

          Write-Host "==== Copying code to dep_build ===="
          Get-ChildItem -Path "./" -Exclude "dep_build", "build" | Copy-Item -Destination "./dep_build" -Recurse -Force

          Write-Host "==== Downloading and extracting Python ${{ env.WIN_EXE_PYTHON_VERSION }} ===="
          $pythonUrl = "https://www.python.org/ftp/python/${{ env.WIN_EXE_PYTHON_VERSION }}/python-${{ env.WIN_EXE_PYTHON_VERSION }}-embed-amd64.zip"
          $pythonZip = "./dep_build/python.zip"
          Invoke-WebRequest -Uri $pythonUrl -OutFile $pythonZip
          Expand-Archive -Path $pythonZip -DestinationPath "./build/runtime" -Force

          Write-Host "==== Downloading Visual C++ Redistributable (VC15 + VC17) ===="
          # VC17
          $vcRedistUrl = "https://aka.ms/vs/17/release/vc_redist.x64.exe"
          $vcRedistPath = "./build/无法运行请安装2_vc_redist17.x64.exe"
          Invoke-WebRequest -Uri $vcRedistUrl -OutFile $vcRedistPath

          # VC15
          $vcRedistUrl = "https://aka.ms/vs/15/release/vc_redist.x64.exe"
          $vcRedistPath = "./build/无法运行请安装1_vc_redist15.x64.exe"
          Invoke-WebRequest -Uri $vcRedistUrl -OutFile $vcRedistPath

          Write-Host "==== Downloading and extracting PyStand ===="
          $pystandUrl = "https://github.com/skywind3000/PyStand/releases/download/1.1.4/PyStand-v1.1.4-exe.zip"
          $pystandZip = "./dep_build/PyStand.zip"
          Invoke-WebRequest -Uri $pystandUrl -OutFile $pystandZip
          Expand-Archive -Path $pystandZip -DestinationPath "./dep_build/PyStand" -Force

          Write-Host "==== Copying PyStand.exe to build folder ===="
          $pystandExe = "./dep_build/PyStand/PyStand-x64-CLI/PyStand.exe"
          $destExe = "./build/pdf2zh.exe"
          Copy-Item -Path $pystandExe -Destination $destExe -Force
          
          Write-Host "==== Creating Python venv in dep_build ===="
          uv venv ./dep_build/venv
          ./dep_build/venv/Scripts/activate

          Write-Host "==== Installing project dependencies in venv ===="
          uv pip install .
          if ("${{ github.event.inputs.babeldoc_version }}") {
            uv pip install --compile-bytecode "BabelDOC[directml]==${{ github.event.inputs.babeldoc_version }}"
          } else {
            uv pip install --upgrade --compile-bytecode "BabelDOC[directml]"
          }
          pdf2zh --version
          babeldoc --version

          Write-Host "==== Copying venv/Lib/site-packages to build/ ===="
          Copy-Item -Path "./dep_build/venv/Lib/site-packages" -Destination "./build/site-packages" -Recurse -Force

          Write-Host "==== Ensuring vcomp140.dll for scikit-learn ===="
          $sklearnLibs = "./build/site-packages/sklearn/.libs"
          if (Test-Path $sklearnLibs) {
            $candidates = @("$env:WINDIR\\System32\\vcomp140.dll", "$env:WINDIR\\SysWOW64\\vcomp140.dll")
            $found = $false
            foreach ($src in $candidates) {
              if (Test-Path $src) {
                Write-Host "Found vcomp140.dll at $src"
                Copy-Item -Path $src -Destination $sklearnLibs -Force
                $found = $true
                break
              }
            }
            if (-not $found) {
              $pkgDll = Get-ChildItem -Path "./build/site-packages" -Recurse -Filter "vcomp140.dll" -ErrorAction SilentlyContinue | Select-Object -First 1
              if ($pkgDll) {
                Write-Host "Found vcomp140.dll in packages at $($pkgDll.FullName)"
                Copy-Item -Path $pkgDll.FullName -Destination $sklearnLibs -Force
                $found = $true
              }
            }
            if (-not $found) {
              Write-Host "Warning: vcomp140.dll not found; build may fail at runtime."
            }
          } else {
            Write-Host "sklearn/.libs not present; skipping vcomp140.dll copy."
          }

          Write-Host "==== Copying script/_pystand_static.int to build/ ===="
          Copy-Item -Path "./script/_pystand_static.int" -Destination "./build/_pystand_static.int" -Force

          Write-Host "==== Testing pdf2zh.exe show version ===="
          ./build/pdf2zh.exe --version

      - name: Get BabelDOC version
        id: get-babeldoc-version
        shell: pwsh
        run: |
          ./dep_build/venv/Scripts/activate
          $version = (uv pip show BabelDOC | Select-String -Pattern "Version:").Line.Split(' ')[1].Trim()
          Write-Host "BabelDOC version is $version"
          echo "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Generate offline assets
        shell: pwsh
        run: |
          ./dep_build/venv/Scripts/activate
          babeldoc --generate-offline-assets ./build
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: win64-exe-with-assets
          path: ./build
          compression-level: 1
          include-hidden-files: true

  test-win64-exe:
    name: Test Windows EXE
    needs: [build-win64-exe, get-latest-release]
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.get-latest-release.outputs.tag }}

      - name: Download build artifact
        uses: actions/download-artifact@v5
        with:
          name: win64-exe-with-assets
          path: ./build

      - name: Install VC++ 2015 Redistributable
        run: |
          ./build/无法运行请安装1_vc_redist15.x64.exe /quiet /norestart
      
      - name: Run EXE tests
        run: |
          ./build/pdf2zh.exe --version
          ./build/pdf2zh.exe ./test/file/translate.cli.plain.text.pdf --output ./test/file --bing
          ./build/pdf2zh.exe ./test/file/translate.cli.text.with.figure.pdf --output ./test/file --bing

  build-docker-image:
    uses: ./.github/workflows/docker-build.yml
    needs: [test, test-win64-exe, get-latest-release, build-win64-exe]
    with:
      version: ${{ needs.get-latest-release.outputs.tag }}
      is_release: true
      babeldoc_version: ${{ needs.build-win64-exe.outputs.babeldoc_version }}
      push_to_acr: true
    secrets: inherit

  upload-release-asset:
    name: Upload Asset to Release
    needs: [test, test-win64-exe, get-latest-release, build-win64-exe]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.get-latest-release.outputs.tag }}
      - name: Download build artifact
        uses: actions/download-artifact@v5
        with:
          name: win64-exe-with-assets
          path: ./build
      - name: Create release zip
        run: |
          mv ./build ./pdf2zh
          zip -9qr "pdf2zh-${{ needs.get-latest-release.outputs.tag }}-BabelDOC-v${{ needs.build-win64-exe.outputs.babeldoc_version }}-with-assets-win64.zip" ./pdf2zh/*
          
          find ./pdf2zh -name "offline_assets_*.zip" -type f -print -delete
          
          zip -9qr "pdf2zh-${{ needs.get-latest-release.outputs.tag }}-BabelDOC-v${{ needs.build-win64-exe.outputs.babeldoc_version }}-win64.zip" ./pdf2zh/*
      - name: Upload to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ needs.get-latest-release.outputs.tag }} ./*.zip --clobber 