name: Test and Release

on:
  push:
    tags:
      - 'v*'
      - 'release-*'

permissions:
  id-token: write
  contents: write
  pull-requests: write

env:
  REGISTRY: ghcr.io
  REPO_LOWER: ${{ github.repository_owner }}/${{ github.event.repository.name }}
  GHCR_REPO: ghcr.io/${{ github.repository }}
  DOCKERHUB_REPO: kulangsu/pdf2zh
  ACR_REGISTRY: ${{ secrets.ACR_REGISTRY }}
  ACR_REPO: ${{ secrets.ACR_REPOSITORY }}
  WIN_EXE_PYTHON_VERSION: "3.13.3"

jobs:
  check-repository:
    name: Check if running in main repository
    runs-on: ubuntu-latest
    outputs:
      # debug purpose
      is_main_repo: ${{ github.repository == 'PDFMathTranslate/PDFMathTranslate-next' }}
    steps:
      - run: echo "Running repository check"

  test:
    needs: check-repository
    uses: ./.github/workflows/python-test.yml
    if: needs.check-repository.outputs.is_main_repo == 'true'

  build:
    name: Build distribution 📦
    needs: [test, check-repository]
    if: needs.check-repository.outputs.is_main_repo == 'true'
    runs-on: ubuntu-latest
    outputs:
      is_release: ${{ steps.check-version.outputs.tag }}
      version: ${{ steps.check-version.outputs.tag && steps.get-release-version.outputs.version || steps.get-dev-version.outputs.version }}
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: true
          fetch-depth: 2
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup uv with Python 3.13
        uses: astral-sh/setup-uv@4959332f0f014c5280e7eac8b70c90cb574c9f9b # v6.6.0
        with:
          python-version: "3.13"
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"
          activate-environment: true

      - name: Check if there is a parent commit
        id: check-parent-commit
        run: |
          echo "sha=$(git rev-parse --verify --quiet HEAD^)" >> $GITHUB_OUTPUT

      - name: Detect and tag new version
        id: check-version
        if: steps.check-parent-commit.outputs.sha
        uses: salsify/action-detect-and-tag-new-version@b1778166f13188a9d478e2d1198f993011ba9864 # v2.0.3
        with:
          version-command: |
            cat pyproject.toml | grep "version = " | head -n 1 | awk -F'"' '{print $2}'
          tag-template: 'v{VERSION}'

      - name: Install Dependencies
        run: |
          uv sync

      - name: Bump version for developmental release
        if: "!steps.check-version.outputs.tag"
        id: get-dev-version
        run: |
          version=$(bumpver update --patch --tag=final --dry 2>&1 | grep "New Version" | awk '{print $NF}')
          echo "version=$version.dev$(date +%s)" >> $GITHUB_OUTPUT
          bumpver update --set-version $version.dev$(date +%s)

      - name: Get release version
        if: steps.check-version.outputs.tag
        id: get-release-version
        run: |
          version=$(cat pyproject.toml | grep "version = " | head -n 1 | awk -F'"' '{print $2}')
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Build package
        run: "uv build"

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4.6.0
        with:
          name: python-package-distributions
          path: dist/

  publish-to-pypi:
    name: Publish Python 🐍 distribution 📦 to PyPI
    if: needs.build.outputs.is_release != ''
    needs:
      - check-repository
      - build
      - test-win64-exe
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/pdf2zh-next

    permissions:
      id-token: write

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@de96f4613b77ec03b5cf633e7c350c32bd3c5660 # v4.1.8
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish distribution 📦 to PyPI
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1.12.4

  publish-to-testpypi:
    name: Publish Python 🐍 distribution 📦 to TestPyPI
    if: needs.build.outputs.is_release == ''
    needs:
      - check-repository
      - build
      - test-win64-exe
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/pdf2zh-next

    permissions:
      id-token: write

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@de96f4613b77ec03b5cf633e7c350c32bd3c5660 # v4.1.8
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish distribution 📦 to TestPyPI
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1.12.4
        with:
          repository-url: https://test.pypi.org/legacy/

  build-docker-image:
    uses: ./.github/workflows/docker-build.yml
    needs:
      - build
      - check-repository
      - build-win64-exe
    if: needs.check-repository.outputs.is_main_repo == 'true'
    with:
      version: ${{ needs.build.outputs.version }}
      is_release: ${{ needs.build.outputs.is_release != '' }}
      babeldoc_version: ${{ needs.build-win64-exe.outputs.babeldoc_version }}
      push_to_acr: true
    secrets: inherit


  build-win64-exe:
    runs-on: windows-latest
    needs:
      - check-repository
    if: needs.check-repository.outputs.is_main_repo == 'true'
    outputs:
      babeldoc_version: ${{ steps.get-babeldoc-version.outputs.version }}
    steps:
      - name: checkout babeldoc metadata
        uses: actions/checkout@v5
        with:
          repository: funstory-ai/BabelDOC
          path: babeldoctemp1234567
          token: ${{ secrets.GITHUB_TOKEN }}
          sparse-checkout: babeldoc/assets/embedding_assets_metadata.py
      - name: Cached Assets
        id: cache-assets
        uses: actions/cache@v4.2.2
        with:
          path: ~/.cache/babeldoc
          key: test-1-babeldoc-assets-${{ hashFiles('babeldoctemp1234567/babeldoc/assets/embedding_assets_metadata.py') }}
      - name: 检出代码
        uses: actions/checkout@v5

      - name: Setup uv with Python ${{ env.WIN_EXE_PYTHON_VERSION }}
        uses: astral-sh/setup-uv@4959332f0f014c5280e7eac8b70c90cb574c9f9b # v6.6.0
        with:
          python-version: ${{ env.WIN_EXE_PYTHON_VERSION }}
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"
          activate-environment: true

      - name: 执行所有任务（创建目录、下载、解压、复制文件、安装依赖）
        shell: pwsh
        run: |
          Write-Host "==== 创建必要的目录 ===="
          New-Item -Path "./build" -ItemType Directory -Force
          New-Item -Path "./build/runtime" -ItemType Directory -Force
          New-Item -Path "./dep_build" -ItemType Directory -Force

          Write-Host "==== 复制代码到 dep_build ===="
          Get-ChildItem -Path "./" -Exclude "dep_build", "build" | Copy-Item -Destination "./dep_build" -Recurse -Force

          Write-Host "==== 下载并解压 Python ${{ env.WIN_EXE_PYTHON_VERSION }} ===="
          Write-Host "pythonUrl: https://www.python.org/ftp/python/${{ env.WIN_EXE_PYTHON_VERSION }}/python-${{ env.WIN_EXE_PYTHON_VERSION }}-embed-amd64.zip"
          $pythonUrl = "https://www.python.org/ftp/python/${{ env.WIN_EXE_PYTHON_VERSION }}/python-${{ env.WIN_EXE_PYTHON_VERSION }}-embed-amd64.zip"
          $pythonZip = "./dep_build/python.zip"
          Invoke-WebRequest -Uri $pythonUrl -OutFile $pythonZip
          Expand-Archive -Path $pythonZip -DestinationPath "./build/runtime" -Force

          Write-Host "==== 下载 Visual C++ Redistributable 安装程序 ===="
          $vcRedistUrl = "https://aka.ms/vs/17/release/vc_redist.x64.exe"
          $vcRedistPath = "./build/无法运行请安装2_vc_redist17.x64.exe"
          Invoke-WebRequest -Uri $vcRedistUrl -OutFile $vcRedistPath
          Write-Host "已下载 Visual C++ Redistributable 安装程序到: $vcRedistPath"

          # https://aka.ms/vs/15/release/vc_redist.x64.exe
          $vcRedistUrl = "https://aka.ms/vs/15/release/vc_redist.x64.exe"
          $vcRedistPath = "./build/无法运行请安装1_vc_redist15.x64.exe"
          Invoke-WebRequest -Uri $vcRedistUrl -OutFile $vcRedistPath
          Write-Host "已下载 Visual C++ Redistributable 安装程序到: $vcRedistPath"

          Write-Host "==== 下载并解压 PyStand ===="
          $pystandUrl = "https://github.com/skywind3000/PyStand/releases/download/1.1.4/PyStand-v1.1.4-exe.zip"
          $pystandZip = "./dep_build/PyStand.zip"
          Invoke-WebRequest -Uri $pystandUrl -OutFile $pystandZip
          Expand-Archive -Path $pystandZip -DestinationPath "./dep_build/PyStand" -Force

          Write-Host "==== 复制 PyStand.exe 到 build 并重命名 ===="
          $pystandExe = "./dep_build/PyStand/PyStand-x64-CLI/PyStand.exe"
          $destExe = "./build/pdf2zh.exe"
          if (Test-Path $pystandExe) {
              Copy-Item -Path $pystandExe -Destination $destExe -Force
          } else {
              Write-Host "错误: PyStand.exe 未找到！"
              exit 1
          }
          Write-Host "==== 创建 Python venv 在 dep_build ===="
          uv venv ./dep_build/venv

          ./dep_build/venv/Scripts/activate

          Write-Host "==== 在 venv 环境中安装项目依赖 ===="
          uv pip install .
          uv pip install --compile-bytecode BabelDOC[directml]
          pdf2zh --version
          babeldoc --version

          Write-Host "==== 复制 venv/Lib/site-packages 到 build/ ===="
          Copy-Item -Path "./dep_build/venv/Lib/site-packages" -Destination "./build/site-packages" -Recurse -Force

          Write-Host "==== 确保 scikit-learn 的 vcomp140.dll 存在 ===="
          $sklearnLibs = "./build/site-packages/sklearn/.libs"
          if (Test-Path $sklearnLibs) {
            $candidates = @("$env:WINDIR\\System32\\vcomp140.dll", "$env:WINDIR\\SysWOW64\\vcomp140.dll")
            $found = $false
            foreach ($src in $candidates) {
              if (Test-Path $src) {
                Write-Host "Found vcomp140.dll at $src"
                Copy-Item -Path $src -Destination $sklearnLibs -Force
                $found = $true
                break
              }
            }
            if (-not $found) {
              $pkgDll = Get-ChildItem -Path "./build/site-packages" -Recurse -Filter "vcomp140.dll" -ErrorAction SilentlyContinue | Select-Object -First 1
              if ($pkgDll) {
                Write-Host "Found vcomp140.dll in packages at $($pkgDll.FullName)"
                Copy-Item -Path $pkgDll.FullName -Destination $sklearnLibs -Force
                $found = $true
              }
            }
            if (-not $found) {
              Write-Host "Warning: vcomp140.dll not found; build may fail at runtime."
            }
          } else {
            Write-Host "sklearn/.libs not present; skipping vcomp140.dll copy."
          }

          Write-Host "==== 复制 script/_pystand_static.int 到 build/ ===="
          $staticFile = "./script/_pystand_static.int"
          $destStatic = "./build/_pystand_static.int"
          if (Test-Path $staticFile) {
              Copy-Item -Path $staticFile -Destination $destStatic -Force
          } else {
              Write-Host "错误: script/_pystand_static.int 未找到！"
              exit 1
          }

          Write-Host "==== Testing pdf2zh.exe show version ===="
          ./build/pdf2zh.exe --version

      - name: Get BabelDOC version
        id: get-babeldoc-version
        shell: pwsh
        run: |
          ./dep_build/venv/Scripts/activate
          $version = (uv pip show BabelDOC | Select-String -Pattern "Version:").Line.Split(' ')[1].Trim()
          Write-Host "BabelDOC version is $version"
          echo "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Generate offline assets
        shell: pwsh
        run: |
          Write-Host "==== 生成离线资源包 ===="
          ./dep_build/venv/Scripts/activate
          babeldoc --generate-offline-assets ./build
      
      - name: Upload build with offline assets artifact
        uses: actions/upload-artifact@v4
        with:
          name: win64-exe-with-assets
          path: ./build
          if-no-files-found: error
          compression-level: 1
          include-hidden-files: true
      

  test-win64-exe:
    needs: 
      - build-win64-exe
      - check-repository
    if: needs.check-repository.outputs.is_main_repo == 'true'
    runs-on: windows-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v5

      - name: Download build artifact
        uses: actions/download-artifact@v5
        with:
          name: win64-exe-with-assets
          path: ./build

      - name: Install VC++ 2015 Redistributable
        run: |
          ./build/无法运行请安装1_vc_redist15.x64.exe /quiet /norestart

      - name: Test show version
        run: |
          ./build/pdf2zh.exe --version
      
      - name: Test - Translate a PDF file with plain text only (online mode)
        run: |
          ./build/pdf2zh.exe ./test/file/translate.cli.plain.text.pdf --output ./test/file --bing

      - name: Test - Translate a PDF file figure
        run: |
          ./build/pdf2zh.exe ./test/file/translate.cli.text.with.figure.pdf --output ./test/file --bing

      - name: Delete offline assets and cache
        shell: pwsh
        run: |
          Write-Host "==== 查找并删除离线资源包 ===="
          $offlineAssetsPath = Get-ChildItem -Path "./build" -Filter "offline_assets_*.zip" -Recurse | Select-Object -First 1 -ExpandProperty FullName
          if ($offlineAssetsPath) {
            Write-Host "找到离线资源包: $offlineAssetsPath"
            Remove-Item -Path $offlineAssetsPath -Force
            Write-Host "已删除离线资源包"
          } else {
            Write-Host "未找到离线资源包"
          }
          
          Write-Host "==== 删除缓存目录 ===="
          $cachePath = "$env:USERPROFILE/.cache/babeldoc"
          if (Test-Path $cachePath) {
            Remove-Item -Path $cachePath -Recurse -Force
            Write-Host "已删除缓存目录: $cachePath"
          } else {
            Write-Host "缓存目录不存在: $cachePath"
          }

      - name: Test - Translate without offline assets
        run: |
          Write-Host "==== 测试离线资源包 ===="
          New-Item -Path "./test/file/offline_result" -ItemType Directory -Force
          ./build/pdf2zh.exe ./test/file/translate.cli.plain.text.pdf --output ./test/file/offline_result --bing


      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ./test/file/



  release-draft:
    name: Release Draft Tasks
    needs:
      - check-repository
      - build
      - publish-to-pypi
      - publish-to-testpypi
      - merge-docker-image
      - test-win64-exe
    if: |
      always() && needs.check-repository.outputs.is_main_repo == 'true' && 
      (needs.publish-to-pypi.result == 'success' || needs.publish-to-testpypi.result == 'success') &&
      needs.merge-docker-image.result == 'success' &&
      needs.test-win64-exe.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      tag_name: ${{ steps.release-drafter.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: true
          fetch-depth: 2
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish the release notes
        id: release-drafter
        uses: release-drafter/release-drafter@b1476f6e6eb133afa41ed8589daba6dc69b4d3f5 # v6.1.0
        with:
          publish: ${{ needs.build.outputs.is_release != '' }}
          tag: ${{ needs.build.outputs.is_release }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  upload-release:
    needs: [build, release-draft, check-repository, build-win64-exe]
    runs-on: ubuntu-latest
    if: always() && needs.check-repository.outputs.is_main_repo == 'true' &&
      needs.release-draft.result == 'success'
    steps:
      - name: 检出代码
        uses: actions/checkout@v5

      - name: Delete existing release assets
        if: needs.build.outputs.is_release != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_RELEASE=${{ needs.release-draft.outputs.tag_name }}
          echo "Deleting assets from release $LATEST_RELEASE"
          ASSETS=$(gh release view "$LATEST_RELEASE" --json assets --jq '.assets.[].name' || echo "")
          if [ -n "$ASSETS" ]; then
            echo "$ASSETS" | xargs -r -I {} gh release delete-asset "$LATEST_RELEASE" "{}" --yes
          else
            echo "No assets to delete."
          fi

      - name: Download build artifact
        uses: actions/download-artifact@v5
        with:
          name: win64-exe-with-assets
          path: ./build

      - name: Create release zip
        run: |
          mv ./build ./pdf2zh
          zip -9qr "pdf2zh-${{ needs.release-draft.outputs.tag_name }}-BabelDOC-v${{ needs.build-win64-exe.outputs.babeldoc_version }}-with-assets-win64.zip" ./pdf2zh/*

          # 查找并删除离线资源文件
          find ./pdf2zh -name "offline_assets_*.zip" -type f -print -delete
          # 确保删除操作成功
          echo "Remaining offline assets files (should be empty):"
          find ./pdf2zh -name "offline_assets_*.zip" -type f
          
          zip -9qr "pdf2zh-${{ needs.release-draft.outputs.tag_name }}-BabelDOC-v${{ needs.build-win64-exe.outputs.babeldoc_version }}-win64.zip" ./pdf2zh/*

      - name: Upload to latest release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest release (including drafts and pre-releases)
          LATEST_RELEASE=${{ needs.release-draft.outputs.tag_name }}
          echo "Latest release tag: $LATEST_RELEASE"
          
          # Upload the zip file to the release
          gh release upload "$LATEST_RELEASE" "pdf2zh-${{ needs.release-draft.outputs.tag_name }}-BabelDOC-v${{ needs.build-win64-exe.outputs.babeldoc_version }}-win64.zip" --clobber
          gh release upload "$LATEST_RELEASE" "pdf2zh-${{ needs.release-draft.outputs.tag_name }}-BabelDOC-v${{ needs.build-win64-exe.outputs.babeldoc_version }}-with-assets-win64.zip" --clobber
