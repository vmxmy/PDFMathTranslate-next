name: Reusable Docker Build and Push

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
        description: 'Version tag for the image'
      is_release:
        required: false
        type: boolean
        default: false
        description: 'Whether this is a release build'
      babeldoc_version:
        required: false
        type: string
        default: ''
        description: 'BabelDOC version to use'
      push_to_acr:
        required: false
        type: boolean
        default: true
        description: 'Whether to push to ACR'

env:
  REGISTRY: ghcr.io
  REPO_LOWER: ${{ github.repository_owner }}/${{ github.event.repository.name }}
  GHCR_REPO: ghcr.io/${{ github.repository }}
  DOCKERHUB_REPO: kulangsu/pdf2zh
  ACR_REGISTRY: ${{ secrets.ACR_REGISTRY }}
  ACR_REPO: ${{ secrets.ACR_REPOSITORY }}

jobs:
  build-and-push:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write

    outputs:
      digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Prepare environment
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          printf 'GHCR_REPO_LOWER=%s\n' "$(echo "${GHCR_REPO}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"
          printf 'DOCKERHUB_REPO_LOWER=%s\n' "$(echo "${DOCKERHUB_REPO}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"
          if [ -n "${ACR_REPO}" ] && [ "${{ inputs.push_to_acr }}" == "true" ]; then
            printf 'ACR_REPO_LOWER=%s\n' "$(echo "${ACR_REPO}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"
          fi

      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare image list
        id: prepare-images
        run: |
          IMAGES="${DOCKERHUB_REPO_LOWER} ${GHCR_REPO_LOWER}"
          if [ -n "${ACR_REPO_LOWER}" ] && [ "${{ inputs.push_to_acr }}" == "true" ]; then
            IMAGES="$IMAGES ${ACR_REPO_LOWER}"
          fi
          echo "images=$IMAGES" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.prepare-images.outputs.images }}
          tags: |
            type=raw,value=dev,enable=${{ !inputs.is_release }}
            type=raw,value=${{ inputs.version }},enable=${{ inputs.is_release }}
            type=raw,value=latest,enable=${{ inputs.is_release }}
            type=raw,value=${{ inputs.version }}-babeldoc-v${{ inputs.babeldoc_version }},enable=${{ inputs.babeldoc_version != '' }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Aliyun ACR
        if: inputs.push_to_acr == true && env.ACR_REGISTRY != ''
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,"name=${{ steps.prepare-images.outputs.images }}",push-by-digest=true,name-canonical=true,push=true
          cache-from: ${{ matrix.platform == 'linux/amd64' && 'type=gha' || '' }}
          cache-to: ${{ matrix.platform == 'linux/amd64' && 'type=gha,mode=max' || '' }}
          context: .

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-manifests:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      packages: write

    steps:
      - name: Prepare environment
        run: |
          printf 'GHCR_REPO_LOWER=%s\n' "$(echo "${GHCR_REPO}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"
          printf 'DOCKERHUB_REPO_LOWER=%s\n' "$(echo "${DOCKERHUB_REPO}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"
          if [ -n "${ACR_REPO}" ] && [ "${{ inputs.push_to_acr }}" == "true" ]; then
            printf 'ACR_REPO_LOWER=%s\n' "$(echo "${ACR_REPO}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download digests
        uses: actions/download-artifact@v5
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Prepare image list for manifest
        id: prepare-images
        run: |
          IMAGES="${DOCKERHUB_REPO_LOWER} ${GHCR_REPO_LOWER}"
          if [ -n "${ACR_REPO_LOWER}" ]; then
            IMAGES="$IMAGES ${ACR_REPO_LOWER}"
          fi
          echo "images=$IMAGES" >> $GITHUB_OUTPUT

      - name: Docker meta for manifest
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.prepare-images.outputs.images }}
          tags: |
            type=raw,value=dev,enable=${{ !inputs.is_release }}
            type=raw,value=${{ inputs.version }},enable=${{ inputs.is_release }}
            type=raw,value=latest,enable=${{ inputs.is_release }}
            type=raw,value=${{ inputs.version }}-babeldoc-v${{ inputs.babeldoc_version }},enable=${{ inputs.babeldoc_version != '' }}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          # Create manifests for each registry
          for image in ${{ steps.prepare-images.outputs.images }}; do
            echo "Creating manifest for $image"
            docker buildx imagetools create \
              $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
              $(printf "$image@sha256:%s " *)
          done

      - name: Inspect images
        run: |
          for image in ${{ steps.prepare-images.outputs.images }}; do
            echo "=== Inspecting $image ==="
            if [ "${{ inputs.is_release }}" == "true" ]; then
              docker buildx imagetools inspect $image:${{ inputs.version }}
            else
              docker buildx imagetools inspect $image:dev
            fi
          done