name: Reusable Docker Build and Push

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
        description: 'Version tag for the image'
      is_release:
        required: false
        type: boolean
        default: false
        description: 'Whether this is a release build'
      babeldoc_version:
        required: false
        type: string
        default: ''
        description: 'BabelDOC version to use'
      push_to_acr:
        required: false
        type: boolean
        default: true
        description: 'Whether to push to ACR'
    secrets:
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_TOKEN:
        required: false
      ACR_REGISTRY:
        required: false
      ACR_REPOSITORY:
        required: false
      ACR_USERNAME:
        required: false
      ACR_PASSWORD:
        required: false
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0 or latest)'
        required: true
        default: 'latest'
      is_release:
        description: 'Whether this is a release build'
        required: false
        type: boolean
        default: false
      babeldoc_version:
        description: 'BabelDOC version to use (optional)'
        required: false
        type: string
        default: ''
      push_to_acr:
        description: 'Push to Aliyun ACR'
        required: false
        type: boolean
        default: true

env:
  REGISTRY: ghcr.io
  REPO_LOWER: ${{ github.repository }}
  GHCR_REPO: ghcr.io/${{ github.repository }}
  DOCKERHUB_REPO: kulangsu/pdf2zh
  ACR_REGISTRY: ${{ secrets.ACR_REGISTRY }}
  ACR_REPO: ${{ secrets.ACR_REPOSITORY }}

jobs:
  build-and-push:
      # 单平台构建，避免 ARM64 等待问题
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Prepare environment
        run: |
          platform=linux/amd64
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          printf 'GHCR_REPO_LOWER=%s\n' "$(echo "${GHCR_REPO}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"
          printf 'DOCKERHUB_REPO_LOWER=%s\n' "$(echo "${DOCKERHUB_REPO}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"
          if [ -n "${ACR_REPO}" ] && [ "${{ inputs.push_to_acr }}" == "true" ]; then
            printf 'ACR_REPO_LOWER=%s\n' "$(echo "${ACR_REPO}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"
          fi

      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare image list
        id: prepare-images
        run: |
          images=("${GHCR_REPO_LOWER}")

          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            images=("${DOCKERHUB_REPO_LOWER}" "${images[@]}")
          fi

          if [ -n "${ACR_REPO_LOWER}" ] && [ "${{ inputs.push_to_acr }}" == "true" ]; then
            images+=("${ACR_REPO_LOWER}")
          fi

          {
            echo 'images<<EOF'
            printf '%s\n' "${images[@]}"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Check Docker Hub credentials
        id: dockerhub-creds
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "enabled=true" >> "$GITHUB_OUTPUT"
          else
            echo "enabled=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.prepare-images.outputs.images }}
          tags: |
            type=raw,value=dev,enable=${{ !inputs.is_release }}
            type=raw,value=${{ inputs.version }},enable=${{ inputs.is_release }}
            type=raw,value=latest,enable=${{ inputs.is_release }}
            type=raw,value=${{ inputs.version }}-babeldoc-v${{ inputs.babeldoc_version }},enable=${{ inputs.babeldoc_version != '' }}

      - name: Login to Docker Hub
        if: ${{ steps.dockerhub-creds.outputs.enabled == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        if: env.GHCR_REPO != ''
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Aliyun ACR
        if: inputs.push_to_acr == true && env.ACR_REGISTRY != ''
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  inspect-images:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Prepare environment
        run: |
          printf 'GHCR_REPO_LOWER=%s\n' "$(echo "${GHCR_REPO}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"
          printf 'DOCKERHUB_REPO_LOWER=%s\n' "$(echo "${DOCKERHUB_REPO}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"
          if [ -n "${ACR_REPO}" ] && [ "${{ inputs.push_to_acr }}" == "true" ]; then
            printf 'ACR_REPO_LOWER=%s\n' "$(echo "${ACR_REPO}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check Docker Hub credentials
        id: dockerhub-creds
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "enabled=true" >> "$GITHUB_OUTPUT"
          else
            echo "enabled=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Login to Docker Hub
        if: ${{ steps.dockerhub-creds.outputs.enabled == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        if: env.GHCR_REPO != ''
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Aliyun ACR
        if: inputs.push_to_acr == true && env.ACR_REGISTRY != ''
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Prepare image list
        id: prepare-images
        run: |
          images=("${GHCR_REPO_LOWER}")

          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            images=("${DOCKERHUB_REPO_LOWER}" "${images[@]}")
          fi

          if [ -n "${ACR_REPO_LOWER}" ]; then
            images+=("${ACR_REPO_LOWER}")
          fi

          {
            echo 'images<<EOF'
            printf '%s\n' "${images[@]}"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Inspect images
        env:
          IMAGES: ${{ steps.prepare-images.outputs.images }}
        run: |
          printf '%s\n' "$IMAGES" | while IFS= read -r image; do
            [ -z "$image" ] && continue
            echo "=== Inspecting $image ==="
            if [ "${{ inputs.is_release }}" == "true" ]; then
              docker buildx imagetools inspect "$image:${{ inputs.version }}"
            else
              docker buildx imagetools inspect "$image:dev"
            fi
          done
